{"version":3,"file":"static/js/8.af603005.chunk.js","mappings":"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","sources":["components/articles/articleinfo.js","components/articles/avoidrelaycommands.js","components/breadcrumbs.js","../node_modules/react-gist/es/index.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst ArticleInfo = ({ category, date, githuburl, summary }) => {\r\n  let githublink;\r\n  if (githuburl) {\r\n    githublink = (\r\n      <a href={githuburl} target=\"_blank\">\r\n        GitHub\r\n      </a>\r\n    );\r\n  } else { githublink = \" - \";}\r\n  \r\n  return (\r\n    <div className=\"col-lg-4\">\r\n      <div className=\"portfolio-info\">\r\n        <h3>Information</h3>\r\n        <ul>\r\n          <li>\r\n            <strong>Category</strong>: {category}\r\n          </li>\r\n          <li>\r\n            <strong>Publish date</strong>: {date}\r\n          </li>\r\n          <li>\r\n            <strong>Project URL</strong>: {githublink}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"portfolio-description\">\r\n        <h2>Summary</h2>\r\n        <p>{summary}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ArticleInfo;\r\n","import React from \"react\";\r\nimport Breadcrumbs from \"../breadcrumbs\";\r\nimport ArticleInfo from \"./articleinfo\";\r\nimport Gist from \"react-gist\";\r\n\r\nimport ArticleImage from \"../../assets/img/articles/optimizememallocation.jpg\";\r\n\r\nconst Article = () => {\r\n  const summary =\r\n    \"Multiple Relay Commands instances can become a source of serious CPU usage for long living View Models in a WPF application using MVVM pattern.\";\r\n  // <!-- ======= Portfolio Details Section ======= -->\r\n  return (\r\n    <React.Fragment>\r\n      <Breadcrumbs title=\"Avoid Relay Commands and prevent CPU usage peaks in WPF(C#)\" />\r\n      <section id=\"portfolio-details\" className=\"portfolio-details\">\r\n        <div className=\"container\">\r\n          <div className=\"row gy-4\">\r\n            <div className=\"col-lg-8\">\r\n              <h2>Introduction</h2>\r\n              <p>\r\n                When using MVVM pattern in a WPF application we usually create\r\n                custom ICommand implementations, one of them is known as Relay\r\n                Command. If you are unfamiliar with commands a good starting\r\n                point is{\" \"}\r\n                <a\r\n                  href=\"https://docs.microsoft.com/en-us/dotnet/desktop/wpf/advanced/commanding-overview?view=netframeworkdesktop-4.8\"\r\n                  target=\"_blank\"\r\n                >\r\n                  here\r\n                </a>\r\n                .\r\n              </p>\r\n              <p>\r\n                I have worked in several WPF applications that had peaks on CPU\r\n                usage, and profiling the application, using{\" \"}\r\n                <a href=\"https://www.jetbrains.com/profiler/\" target=\"_blank\">\r\n                  dotTrace\r\n                </a>\r\n                &nbsp;profile for example, we could see several millions of\r\n                calls to the CanExecute method. This type of commands are spread\r\n                around the application and have significant impact for long\r\n                living View Models, like the “Root” View Model, that could have\r\n                hundred of commands, for example: in menus, context menus ,\r\n                toolbars and other input controls. In this article I explain why\r\n                Relay Commands may have a performance hit and I give some clean\r\n                and simple solutions to solve it.\r\n              </p>\r\n              <h2> Relay Commands</h2>\r\n              The first timed I read about Relay Commands was in{\" \"}\r\n              <a\r\n                href=\"https://github.com/lbugnion/mvvmlight/blob/master/GalaSoft.MvvmLight/GalaSoft.MvvmLight%20(PCL)/Command/RelayCommand.cs\"\r\n                target=\"_blank\"\r\n              >\r\n                MVVM Light Toolkit\r\n              </a>\r\n              , since then I have seen several implementation examples like this\r\n              <a\r\n                href=\"https://www.technical-recipes.com/2016/using-relaycommand-icommand-to-handle-events-in-wpf-and-mvvm/\"\r\n                target=\"_blank\"\r\n              >\r\n                {\" \"}\r\n                one\r\n              </a>\r\n              . So let us look to an usual Relay Command implementation in the\r\n              next snippet:\r\n              <Gist id=\"6229f82df53f2856a49ed8b1595fbcf5\"></Gist>\r\n              <p>\r\n                To create an instance (see the constructor) you only need to\r\n                implement the action for the execute parameter(code to execute\r\n                when a user clicks a button for example) and the action for the\r\n                canExecute (state defining if the command can be executed) and\r\n                that is the main advantage of it, simple and fast to implement.\r\n              </p>\r\n              <p>A good example is the print command:</p>\r\n              <Gist id=\"0e78983201513a4590116712a6dc5af0\"></Gist>\r\n              <p>\r\n                {\" \"}\r\n                The print command command can be executed when the print service\r\n                is online and just prints when invoked, simple as that, no need\r\n                to explicitly raise the CanExecuteChanged event(will explain\r\n                later why) to notify the UI to refresh / invalidate the current\r\n                state of the inputs associated and therefore no need to think or\r\n                implement the logic that can change the CanExecute state. In\r\n                many cases this is an advantage because you can quickly\r\n                implement the command. If command depends on third party\r\n                services or data outside of our domain, that we do not own.\r\n                Probably that third party service is not able to notify the\r\n                state changed, so we need to continuously querying it, in this\r\n                case the relay command fits well.\r\n              </p>\r\n              <p>\r\n                <strong>\r\n                  Why don’t we need to call explicitly the CanExecuteChanged\r\n                  EventHandler?\r\n                </strong>\r\n              </p>\r\n              <p>Looking to the following snippet of the Relay Command:</p>\r\n              <Gist id=\"ca4f05673c26800d9c595b9fae40b106\"></Gist>\r\n              <p>\r\n                Whenever the CanExecuteChanged is subscribed in fact it’s\r\n                subscribing the CommandManager.RequerySuggested, and this is the\r\n                root cause of the performance issue that we may face:\r\n              </p>\r\n              <figure className=\"text-end\">\r\n                <blockquote className=\"blockquote\">\r\n                  <p>\r\n                    Occurs when the{\" \"}\r\n                    <a\r\n                      href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.commandmanager?view=netframework-4.8\"\r\n                      target=\"_blank\"\r\n                    >\r\n                      {\" \"}\r\n                      CommandManager{\" \"}\r\n                    </a>{\" \"}\r\n                    detects conditions that might change the ability of a\r\n                    command to execute\r\n                  </p>\r\n                </blockquote>\r\n                <figcaption className=\"blockquote-footer\">\r\n                  Microsoft documentation{\" \"}\r\n                  <cite title=\"Source Title\">CommandManager Class</cite>\r\n                </figcaption>\r\n              </figure>\r\n              <p>\r\n                It’s quite difficult to have an overview when this event is\r\n                raised, because its trigger outside the CommandManager\r\n                boundaries, you can dig the dotnet/WPF{\" \"}\r\n                <a target=\"_blank\" href=\"https://github.com/dotnet/wpf\">\r\n                  {\" \"}\r\n                  repository{\" \"}\r\n                </a>\r\n                . If you add a break point to the CanExecute method you will see\r\n                this is called very very very often. A mouse move is sufficient\r\n                to trigger this event!\r\n              </p>\r\n              <h2>Commands that can always be executed</h2>\r\n              <p>\r\n                Look to your commands and do not get surprised if a considerable\r\n                part of then returns always true on the CanExecute method. An\r\n                easy solution is to implement a command that simple returns true\r\n                and completely avoid the Relay Command:\r\n              </p>\r\n              <Gist id=\"7f824b8a18445405024e8904cfb42655\"></Gist>\r\n              <p>With this change you easily save a lot of CPU usage.</p>\r\n              <h2>Action or Delegate Commands</h2>\r\n              <p>\r\n                To remove the dependency to CommandManager.RequerySuggested, we\r\n                need to code the rules that can change the CanExecute state. To\r\n                do that we replace the Relay Command for a very similar Action\r\n                Command:\r\n              </p>\r\n              <Gist id=\"50a417af8354992895de12d91f756fb3\"></Gist>\r\n              <p>\r\n                The main difference is that there is not subscription to\r\n                CommandManager.RequerySuggested. The previous PrintCommand\r\n                example needs to be change to:\r\n              </p>\r\n              <Gist id=\"a1a885df1bce1b6017208b469a00a7b5\"></Gist>\r\n              <p>\r\n                When IsOnlineChanged is raised, in PrintService, we need to\r\n                explicitly call the RaiseCanExecuteChanged, in order to notify\r\n                the UI to refresh according to the new state of the command.\r\n                This small change may reduce the number of calls to CanExecute\r\n                method to only one call as long asthe PrintService state does\r\n                not change and this is much more optimized comparing to the\r\n                Relay Command.\r\n              </p>\r\n              <h2>Avoid logic inside CanExecute</h2>\r\n              <p>\r\n                Another source of performance issues is that we tend to compute\r\n                the CanExecute state inside the method itself. If this\r\n                computation is expensive, and called multiple times, although\r\n                the state did not change (the command can be attached to\r\n                multiple inputs), it will have a performance hit. To resolve\r\n                this issue we just need to compute it to a local variable and\r\n                then return always the local variable value:\r\n              </p>\r\n              <Gist id=\"cbfb8192e9aced3ace6311da41e6e5f2\"></Gist>\r\n              <h2>Conclusion</h2>\r\n              <p>\r\n                If you are developing a application and not a POC avoid the\r\n                usage of Relay Commands or similar, this will save you for sure\r\n                a lot of rework. Unless it’s used in very specif situations:\r\n                short living view models or has dependencies on data that needs\r\n                to be queried continuously.\r\n              </p>\r\n              <p>\r\n                In my next post I will show how can we improve this\r\n                implementation using Reactive Extensions, so keep in touch.\r\n              </p>\r\n              <p>See you soon.</p>\r\n              <figure className=\"text-center\">\r\n                <img src={ArticleImage} alt=\"Keep it simple. Keep it clean.\" />\r\n                <figcaption className=\"figure-caption\">Keep it simple. Keep it clean.</figcaption>\r\n              </figure>\r\n            </div>\r\n            <ArticleInfo\r\n              category=\"C#\"\r\n              date=\"Apr 14, 2020\"\r\n              summary={summary}\r\n            ></ArticleInfo>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n\r\n  {\r\n    /* <!-- End Portfolio Details Section --> */\r\n  }\r\n};\r\n\r\nexport default Article;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Breadcrumbs = ({ title }) => {\r\n  {\r\n    /* <!-- ======= Breadcrumbs ======= --> */\r\n  }\r\n  return (\r\n    <section id=\"breadcrumbs\" className=\"breadcrumbs\">\r\n      <div className=\"container\">\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          <h2>{title}</h2>\r\n          <ol>\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            {/* <li>{title}</li> */}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n  {\r\n    /* <!-- End Breadcrumbs --> */\r\n  }\r\n};\r\n\r\nexport default Breadcrumbs;\r\n","function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from \"react\";\n\nvar Gist = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(Gist, _React$PureComponent);\n\n  function Gist() {\n    return _React$PureComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = Gist.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._updateIframeContent();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(_prevProps, _prevState) {\n    this._updateIframeContent();\n  };\n\n  _proto._defineUrl = function _defineUrl() {\n    var _this$props = this.props,\n        id = _this$props.id,\n        file = _this$props.file;\n    var fileArg = file ? \"?file=\" + file : \"\";\n    return \"https://gist.github.com/\" + id + \".js\" + fileArg;\n  };\n\n  _proto._updateIframeContent = function _updateIframeContent() {\n    var _this$props2 = this.props,\n        id = _this$props2.id,\n        file = _this$props2.file;\n    var iframe = this.iframeNode;\n    var doc = iframe.document;\n    if (iframe.contentDocument) doc = iframe.contentDocument;else if (iframe.contentWindow) doc = iframe.contentWindow.document;\n\n    var gistLink = this._defineUrl();\n\n    var gistScript = \"<script type=\\\"text/javascript\\\" src=\\\"\" + gistLink + \"\\\"></script>\";\n    var styles = \"<style>*{font-size:12px;}</style>\";\n    var elementId = file ? \"gist-\" + id + \"-\" + file : \"gist-\" + id;\n    var resizeScript = \"onload=\\\"parent.document.getElementById('\" + elementId + \"').style.height=document.body.scrollHeight + 'px'\\\"\";\n    var iframeHtml = \"<html><head><base target=\\\"_parent\\\">\" + styles + \"</head><body \" + resizeScript + \">\" + gistScript + \"</body></html>\";\n    doc.open();\n    doc.writeln(iframeHtml);\n    doc.close();\n  };\n\n  _proto.render = function render() {\n    var _this = this;\n\n    var _this$props3 = this.props,\n        id = _this$props3.id,\n        file = _this$props3.file;\n    return /*#__PURE__*/React.createElement(\"iframe\", {\n      ref: function ref(n) {\n        _this.iframeNode = n;\n      },\n      width: \"100%\",\n      frameBorder: 0,\n      id: file ? \"gist-\" + id + \"-\" + file : \"gist-\" + id\n    });\n  };\n\n  return Gist;\n}(React.PureComponent);\n\nexport default Gist;"],"names":["githublink","category","date","githuburl","summary","href","target","className","title","id","src","ArticleImage","alt","to","_setPrototypeOf","o","p","Object","setPrototypeOf","__proto__","Gist","_React$PureComponent","subClass","superClass","apply","this","arguments","prototype","create","constructor","_proto","componentDidMount","_updateIframeContent","componentDidUpdate","_prevProps","_prevState","_defineUrl","_this$props","props","file","_this$props2","iframe","iframeNode","doc","document","contentDocument","contentWindow","iframeHtml","open","writeln","close","render","_this","_this$props3","React","ref","n","width","frameBorder"],"sourceRoot":""}